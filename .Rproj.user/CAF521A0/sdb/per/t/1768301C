{
    "contents" : "\n\n\nlibrary(caret)\nset.seed(1492)\n\ninTrain<-createDataPartition(train$label,p=0.05,list=F)\n\ntraining<-train[inTrain,]\n\ntestingAndValidation<-train[-inTrain,]\nprint(\"part 1\")\ninTest<-createDataPartition(testingAndValidation$label,p=.025,list=F)\ntesting<-testingAndValidation[inTest,]\nvalidation<-testingAndValidation[-inTest,]\nprint(\"part2\")\n\n#RFmodel=train(label~.,training,method=\"rf\")\n#print(\"model done\")\n#RfFit<-predict(RFmodel,testing)\n\nnames=c(\"X1\",\"X2\",\"X3\",\"X4\",\"X5\",\"X6\",\"X7\",\"X8\",\"X9\",\"X10\",\"X11\",\"X12\",\"X13\",\"X14\",\"X15\",\"X16\",\"X17\",\"X18\",\"X19\",\"X20\")\n#picture is 28x28\n#find contiguous pixels\ncutoff=220#for considering full\nlowCutoff=50#for considering empty\n\n\n#looks for boundaries of dark, light and inbetween\nprocess1<-function(dataSet=training){\n  ans=data.frame(matrix(nrow=0,ncol=20))\n  colnames(ans)=names\n\n  max=0\n  for (i in 1:nrow(dataSet)){\n    if (i%%100==0)print(paste(\"row number \",toString(i),\" of dataSet\"))\n    \n    #make matrix 28x28\n    newMatrix<-matrix(dataSet[i,2:785],nrow=28,ncol=28,byrow=T)\n    \n    for(j in 1:28){\n      numZero=0\n      numBlur=0\n      numFull=0\n      inZero=1\n      inBlur=0\n      inFull=0\n      sumVector=vector(length=0)\n      #scan matrix for adjacent values\n      for(k in 1:28){\n        a=newMatrix[j,k]\n        if(inZero){\n          if(a<lowCutoff) numZero=numZero+1\n          else {\n            inZero=0\n            inBlur=1\n            sumVector=append(sumVector,numZero)\n            numZero=0\n            numBlur=1\n          }}\n        else if (inBlur){\n          if (a>lowCutoff & a<cutoff) numBlur=numBlur+1\n          else if (a<lowCutoff){\n            inZero=1\n            inBlur=0\n            sumVector=append(sumVector,numBlur)\n            numBlur=0\n            numZero=1\n          } else{#a is full\n            \n            inFull=1\n            inBlur=0\n            sumVector=append(sumVector,numBlur)\n            numBlur=0\n            numFull=1                    \n          }}\n        else{\n          if(a>cutoff) numFull=numFull+1\n          else{\n            inFull=0\n            inBlur=1\n            sumVector=append(sumVector,numFull)\n            numFull=0\n            numBlur=1\n            \n          }\n        }      \n        \n        \n        \n      }\n      #make vector same length\n      #pattern always zero,blur,full,blur,zero...\n      #,newdataframe<-rbind(newdataframe,vector\n      if (length(sumVector)>max) max=length(sumVector)\n      \n      for(n in length(sumVector):18){\n        sumVector<-append(sumVector,0)\n        \n        \n      }\n      #print(sumVector)\n      ans<-rbind(ans,c(dataSet[i,1],j,sumVector))\n      \n      \n    }\n    \n    \n    \n    #print(max)\n  }\n  colnames(ans)=names\n  return(ans)\n}\n\ntrainProData<-function(dataSet=trainSet){\n  #colnames(trainSet)=names\n  rfMod<-train(X1~.,data=dataSet,method=\"rf\")\n  print(\"fit model 1\")\n  return(rfMod)\n}\n\n\nfitProData<-function(rfMod,testSet=testing){  \n  \n  rfTest<-predict(rfMod,testSet)\n  print(\"applied model 1\")\n  testSet$predRight<-rfTest==testSet$X1\n  print(table(rfTest,testSet$X1))\n  return(testSet)\n}\n\n\n\ntrainSet<-process1()\ntrainSet$X1<-as.factor(trainSet$X1)\nrfMod<-trainProData(trainSet)\ntestSet=process1(testing)\ntestSet<-fitProData(rfMod,testSet)\n\n\n#testing$predRight<-RfFit==testing$label\n\n#print(table(RfFit,testing$label))\n\n#tot=sum(testing$predRight)\n\n#print(tot)\n#print(tot/nrow(testing))",
    "created" : 1434599200136.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1631446910",
    "id" : "1768301C",
    "lastKnownWriteTime" : 1434818472,
    "path" : "~/Documents/kaggle/kaggle-digit recognizer/dr.R",
    "project_path" : "dr.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : true,
    "type" : "r_source"
}