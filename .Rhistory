train <- read.csv("~/Documents/kaggle-digit recognizer/train.csv")
View(train)
install.packages("randomForest")
install.packages("readr")
library(randomForest)
library(readr)
set.seed(0)
numTrain <- 10000
numTrees <- 25
train <- read_csv("../input/train.csv")
test <- read_csv("../input/test.csv")
rows <- sample(1:nrow(train), numTrain)
labels <- as.factor(train[rows,1])
train <- train[rows,-1]
rf <- randomForest(train, labels, xtest=test, ntree=numTrees)
predictions <- data.frame(ImageId=1:nrow(test), Label=levels(labels)[rf$test$predicted])
head(predictions)
write_csv(predictions, "rf_benchmark.csv")
test <- read.csv("~/Documents/kaggle-digit recognizer/test.csv")
View(test)
library(randomForest)
library(readr)
set.seed(0)
numTrain <- 10000
numTrees <- 25
train <- read_csv("../input/train.csv")
test <- read_csv("../input/test.csv")
rows <- sample(1:nrow(train), numTrain)
labels <- as.factor(train[rows,1])
train <- train[rows,-1]
rf <- randomForest(train, labels, xtest=test, ntree=numTrees)
predictions <- data.frame(ImageId=1:nrow(test), Label=levels(labels)[rf$test$predicted])
head(predictions)
write_csv(predictions, "rf_benchmark.csv")
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
testing$predRight
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
?neuralnet()
install.packages("neuralnet()")
install.packages("ripa")
?data.frame
?matrix
?vector
library(caret)
set.seed(1492)
inTrain<-createDataPartition(train$label,p=0.0025,list=F)
training<-train[inTrain,]
testingAndValidation<-train[-inTrain,]
print("part 1")
inTest<-createDataPartition(testingAndValidation$label,p=.0025,list=F)
testing<-testingAndValidation[inTest,]
validation<-testingAndValidation[-inTest,]
print("part2")
#RFmodel=train(label~.,training,method="rf")
#print("model done")
#RfFit<-predict(RFmodel,testing)
#picture is 28x28
#find contiguous pixels
cutoff=220#for considering full
lowCutoff=50#for considering empty
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
View(trainSet)
fitProData(rfMod)
rfMod
summary(rfMod)
fitProData(rfMod)
fitProData(rfMod)
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
View(trainSet)
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
View(trainSet)
View(trainSet)
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
testSet=process1(testing)
fitProData(rfMod)
fitProData(rfMod,testSet)
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
fitProData(rfMod)
rfTest<-predict(rfMod,testSet)
testing$predRight<-rfTest==testSet$X1
testSet$predRight<-rfTest==testSet$X1
print(table(rfTest,testSet$X1))
View(testSet)
testSet$pred<-rfTest
View(testSet)
View(testSet)
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
fitProData<-function(rfMod,testSet=testing){
rfTest<-predict(rfMod,testSet)
print("applied model 1")
testSet$predRight<-rfTest==testSet$X1
print(table(rfTest,testSet$X1))
}
fitProData(rfMod)
fitProData(rfMod)
View(training)
View(trainSet)
View(testSet)
fitProData(rfMod,testSet)
View(testSet)
testSet<-fitProData(rfMod,testSet)
View(train)
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
train
library(caret)
library(data.table)
getwd()
train<-read.csv("train.csv")
?train
randomForest
randomForest()
install.packages("randomForest")
randomForest()
library(randomForest)
randomForest()
randomForest
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
res<-data.frame(matrix(nrow=0,ncol=2))
sum(testSet$predRight)
View(testSet)
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
library(caret)
library(data.table)
library(randomForest)
rfNews()
randomForest()
?randomForest()
View(testSet)
View(testSet)
sum(testSet$X12)
sum(testSet$X18)
sum(testSet$X15)
sum(testSet$X12)
sum(testSet$X14)
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
print(sum(testSet$predRight))
print(paste(toString(sum(testSet$predRight))," of ",toString(nrow(testSet))))
print(sum(testSet$predRight))/(nrow(testSet))
print((sum(testSet$predRight))/(nrow(testSet)))
print((paste(toString(100*sum(testSet$predRight))/(nrow(testSet)),"%")))
print((paste(toString(100*sum(testSet$predRight)/(nrow(testSet))),"%")))
print((paste(toString(100*sum(testSet$predRight)/(nrow(testSet))),"%")))
res[1,]<-c(100,79)
res
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
View(train)
View(res)
res[1,3]=41
res[2,]=c(200,77,88)
res[3,]=c(1000,86,734)
plot(res[,1],res[,2])
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
View(test)
View(test)
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
a<-fitCompeteData(rfMod,test)
runOnTest(rfMod,test)
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
runOnTest(rfMod,test)
competeProSet=processTest(test)
competeFit<-fitProData(rfMod,competeProSet)
rfTest<-predict(rfMod,testSet)
rfTest<-predict(rfMod,competeProSet)
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
competeProSet=processTest(test)
competeFit<-fitProData(model,competeProSet)
competeFit<-fitProData(rfMod,competeProSet)
View(competeFit)
testSet<-fitProData(rfMod,testSet)
testSet<-fitProData(rfMod,testSet[-1])
testSet$predRight
testSet
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
testFit<-fitProData(rfMod,testSet[-1])
rfTest<-predict(rfMod,testSet)
print("applied model 1")
testSet$predRight<-rfTest==testSet$X1
print(table(rfTest,testSet$X1))
print(paste(toString(sum(testSet$predRight))," of ",toString(nrow(testSet))))
print((paste(toString(100*sum(testSet$predRight)/(nrow(testSet))),"%")))
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
competeProSet=processTest(test)
library(caret)
library(data.table)
library(randomForest)
set.seed(1492)
competeProSet=processTest(test)
competeFit<-fitProData(rfMod,competeProSet)
competeFit
?write.csv
write.csv(competeFit,"sub1.csv")
write.csv(competeFit,"sub1.csv",row.names=F)
View(competeFit)
colnames(competeFit)="label"
names(competeFit)="label"
View(competeFit)
View(competeFit)
write.csv(competeFit,"sub1.csv",row.names=F,col.names=F)
write.csv(competeFit,"sub1.csv")
gbm<-trainProDataGBM()
print("generate random forest")
gbmMod<-train(X1~.,data=dataSet,method="gbm")
#rfMod<-train(dataSet[,1]~dataSet[,2:ncol(dataSet)],method="rf")
print("model ready")
print("generate random forest")
gbmMod<-train(X1~.,data=trainSet,method="gbm")
#rfMod<-train(dataSet[,1]~dataSet[,2:ncol(dataSet)],method="rf")
print("model ready")
View(testSet)
print("generate boost")
gbmMod<-train(X1~.,data=dataSet,method="gbm")
print("model ready")
print("generate boost")
gbmMod<-train(X1~.,data=trainSet,method="gbm")
print("model ready")
View(trainSet)
View(trainSet)
print("generate boost")
gbmMod<-train(.outcome~.,data=trainSet,method="gbm")
gbmMod
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
competeFit
?write.csv
write.csv(competeFit,paste("sub",Sys.time(),".csv",sep=""))
rfMod
bestRFModel<-rfMod
gbmMod<-trainProDataGBM(trainSet)
gbmMod<-trainProDataGBM(training)
View(training)
gbmMod<-train(label~.,data=dataSet,method="gbm")
gbmMod<-train(label~.,data=training,method="gbm")
gbm7500model<-gbmMod
gbmFit<-fitProData(gbmMod,testing)
gbmFit<-fitProData(gbmMod,testSet)
View(testSet)
View(testSet)
View(trainSet)
testSet=process1(testing)
gbmFit<-fitProData(gbmMod,testSet)
View(testSet)
gbmMod<-train(label~.,data=trainSet,method="gbm")
View(trainSet)
gbmMod<-train(.outcome~.,data=trainSet,method="gbm")
gbmFit<-fitProData(gbm7500Mod,testSet)
gbmFit<-fitProData(gbm7500Model,testSet)
