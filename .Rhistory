train <- read.csv("~/Documents/kaggle-digit recognizer/train.csv")
View(train)
install.packages("randomForest")
install.packages("readr")
library(randomForest)
library(readr)
set.seed(0)
numTrain <- 10000
numTrees <- 25
train <- read_csv("../input/train.csv")
test <- read_csv("../input/test.csv")
rows <- sample(1:nrow(train), numTrain)
labels <- as.factor(train[rows,1])
train <- train[rows,-1]
rf <- randomForest(train, labels, xtest=test, ntree=numTrees)
predictions <- data.frame(ImageId=1:nrow(test), Label=levels(labels)[rf$test$predicted])
head(predictions)
write_csv(predictions, "rf_benchmark.csv")
test <- read.csv("~/Documents/kaggle-digit recognizer/test.csv")
View(test)
library(randomForest)
library(readr)
set.seed(0)
numTrain <- 10000
numTrees <- 25
train <- read_csv("../input/train.csv")
test <- read_csv("../input/test.csv")
rows <- sample(1:nrow(train), numTrain)
labels <- as.factor(train[rows,1])
train <- train[rows,-1]
rf <- randomForest(train, labels, xtest=test, ntree=numTrees)
predictions <- data.frame(ImageId=1:nrow(test), Label=levels(labels)[rf$test$predicted])
head(predictions)
write_csv(predictions, "rf_benchmark.csv")
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
testing$predRight
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
?neuralnet()
install.packages("neuralnet()")
install.packages("ripa")
?data.frame
?matrix
?vector
library(caret)
set.seed(1492)
inTrain<-createDataPartition(train$label,p=0.0025,list=F)
training<-train[inTrain,]
testingAndValidation<-train[-inTrain,]
print("part 1")
inTest<-createDataPartition(testingAndValidation$label,p=.0025,list=F)
testing<-testingAndValidation[inTest,]
validation<-testingAndValidation[-inTest,]
print("part2")
#RFmodel=train(label~.,training,method="rf")
#print("model done")
#RfFit<-predict(RFmodel,testing)
#picture is 28x28
#find contiguous pixels
cutoff=220#for considering full
lowCutoff=50#for considering empty
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
View(trainSet)
fitProData(rfMod)
rfMod
summary(rfMod)
fitProData(rfMod)
fitProData(rfMod)
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
View(trainSet)
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
View(trainSet)
View(trainSet)
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
testSet=process1(testing)
fitProData(rfMod)
fitProData(rfMod,testSet)
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
fitProData(rfMod)
rfTest<-predict(rfMod,testSet)
testing$predRight<-rfTest==testSet$X1
testSet$predRight<-rfTest==testSet$X1
print(table(rfTest,testSet$X1))
View(testSet)
testSet$pred<-rfTest
View(testSet)
View(testSet)
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
fitProData<-function(rfMod,testSet=testing){
rfTest<-predict(rfMod,testSet)
print("applied model 1")
testSet$predRight<-rfTest==testSet$X1
print(table(rfTest,testSet$X1))
}
fitProData(rfMod)
fitProData(rfMod)
View(training)
View(trainSet)
View(testSet)
fitProData(rfMod,testSet)
View(testSet)
testSet<-fitProData(rfMod,testSet)
View(train)
source('~/Documents/kaggle/kaggle-digit recognizer/dr.R')
